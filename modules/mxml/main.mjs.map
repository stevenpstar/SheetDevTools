{"version":3,"sources":["../src/score.ts","../src/parser.ts","../src/main.ts"],"sourcesContent":["export enum XMLClef {\n  G,\n}\n\nexport type XMLNote = {\n   ID: number;\n   Beat: number;\n   Duration: number; // should be divided by 4 from XML value\n   NoteName: string;\n   Tied: boolean;\n   Staff: number;\n   Grace: boolean;\n   Voice: number;\n}\n\nexport type XMLMeasure = {\n  ID: number,\n  Clef: XMLClef,\n  Key: string,\n  TimeSignature: { top: number, bottom: number },\n  Notes: XMLNote[],\n};\n\nexport type XMLScore = {\n  Measures: XMLMeasure[]\n}\n\nexport function CreateEmptyScore(): XMLScore {\n  return {\n    Measures: [],\n  };\n}\n","import { XMLClef, CreateEmptyScore, XMLMeasure, XMLNote, XMLScore } from \"./score.js\";\n\ntype Params = {\n  state: State,\n  score: XMLScore,\n  lines: string[],\n};\n\nenum State {\n  FindMeasure = 0,\n  DefineMeasure = 1,\n};\n\nenum MeasureSteps {\n  FindKey,\n  FindTimeSig,\n\n  MeasureStepCount\n}\n\nenum Token {\n  OpenTagStart = \"<\",\n  EndTagStart = \"</\",\n  CloseTagEnd = \">\",\n  Score = \"score-part\",\n  PartList = \"part-list\",\n  Part = \"score-part\",\n  MeasureStart = \"<measure\",\n  MeasureEnd = \"</measure>\",\n};\n\nexport function ParseTextPartWise(fileString: string): XMLScore {\n  const Params: Params = {\n    state: State.FindMeasure,\n    score: CreateEmptyScore(),\n    lines: fileString.split(\"\\n\")\n  };\n\n  let CurrentMeasure: XMLMeasure = null;\n  let CurrentNote: XMLNote = null;\n  let MeasureDivisions: number = 1;\n  let RunningNoteID: number = 0;\n  let CurrentBeat = 1;\n  let LastBeat = 1;\n  let LastDuration = 0;\n  let NoteLetter: string = \"\";\n  let NoteOctave: string = \"\";\n  let IsChord: boolean = false;\n\n  Params.lines.forEach((line: string, i: number) => {\n    if (line.includes(Token.MeasureStart)) {\n      CurrentMeasure = FindMeasure(Params, line);\n      CurrentBeat = 1;\n    }\n    if (CurrentMeasure) {\n\n      if (line.includes(\"</measure\")) {\n        CurrentMeasure = null;\n        LastBeat = 1;\n        CurrentBeat = 1;\n        LastDuration = 0;\n      }\n\n      if (line.includes(\"<divisions\")) {\n        MeasureDivisions = parseInt(GetContentBetweenTags(line));\n      }\n\n      else if (line.includes(\"<fifths\")) {\n        let keyData = GetContentBetweenTags(line);\n        let keyString = ReturnKeyString(parseInt(keyData));\n        if (keyString === \"KeyNotFound\") {\n          console.error(\"Key Not Found!\");\n        }\n        CurrentMeasure.Key = keyString;\n      }\n      else if (line.includes(\"<beats\")) {\n        let beat = parseInt(GetContentBetweenTags(line));\n        CurrentMeasure.TimeSignature.top = beat;\n      } else if (line.includes(\"<beat-type\")) {\n        let beatType = parseInt(GetContentBetweenTags(line));\n        CurrentMeasure.TimeSignature.bottom = beatType;\n      } else if (line.includes(\"<sign\")) {\n        let clefType = GetContentBetweenTags(line);\n        CurrentMeasure.Clef = ReturnClefType(clefType);\n      }\n\n      if (line.includes(\"<note\")) {\n        IsChord = false;\n        CurrentNote = null;\n        CurrentNote = CreateEmptyNote(RunningNoteID);\n        // Get Next line to search for <chord /> tag, this is probably not be reliable. Will need to test.\n        if (i + 1 <= Params.lines.length - 1) {\n          if (!Params.lines[i+1].includes(\"<chord\")) {\n            CurrentBeat += LastDuration * 4;\n          }\n        }\n\n        CurrentNote.Beat = CurrentBeat;\n        CurrentMeasure.Notes.push(CurrentNote);\n      } else if (line.includes(\"</note\")) {\n        CurrentNote = null;\n        RunningNoteID += 1;\n      }\n\n      if (CurrentNote) {\n\n        if (line.includes(\"<chord\")) {\n          IsChord = true;\n        }\n\n        if (line.includes(\"<step\")) {\n            NoteLetter = GetContentBetweenTags(line);\n            if (NoteOctave !== \"\") {\n              CurrentNote.NoteName = NoteLetter + NoteOctave;\n            }\n          } else if (line.includes(\"<octave\")) {\n            NoteOctave = GetContentBetweenTags(line);\n            if (NoteLetter !== \"\") {\n              CurrentNote.NoteName = NoteLetter + NoteOctave;\n            }\n          } else if (line.includes(\"<duration\")) {\n            let note_duration = parseInt(GetContentBetweenTags(line)) / 4;\n            CurrentNote.Duration = note_duration / MeasureDivisions;\n            LastDuration = CurrentNote.Duration;\n          }\n\n      } // CurrentNote End Loop\n\n    } // CurrentMeasure End Loop\n  });\n\n  // do it in one loop\n\n  return Params.score;\n}\n\nfunction FindMeasure(params: Params, line: String): XMLMeasure {\n  if (line.includes(Token.MeasureStart)) {\n    let id = 0;\n    if (line.includes('number=\"')) {\n      let split_line = line.split('\"');\n      if (split_line.length >= 3) {\n        id = parseInt(split_line[1]);\n        console.log(\"Parsed measure id: \", id);\n      }\n    }\n    let msr: XMLMeasure = CreateEmptyMeasure(id);\n    params.score.Measures.push(msr);\n    params.state = State.DefineMeasure;\n    return msr;\n  }\n}\n\nfunction GetContentBetweenTags(line: string): string {\n  let split_line = line.split(Token.CloseTagEnd);\n  if (split_line.length < 2) {\n    console.error(\"Could not get content, error with tag splitting!\");\n    return \"\";\n  }\n  return split_line[1].split(Token.EndTagStart)[0];\n}\n\nfunction ReturnClefType(clefString: string): number {\n  if (clefString === \"G\") {\n    return 0;\n  }\n  return -1;\n}\n\nfunction ReturnKeyString(keyData: number): string {\n  switch (keyData) {\n    case 0:\n      return \"CMaj/Amin\";\n    case -1:\n      return \"FMaj/Dmin\";\n    case 2:\n      return \"DMaj/Bmin\";\n    default:\n      return \"KeyNotFound\";\n  }\n}\n\nfunction CreateEmptyNote(id: number): XMLNote {\n  return {\n    ID: id,\n    Beat: -1,\n    Duration: -1,\n    NoteName: \"\",\n    Tied: false,\n    Staff: 0,\n    Grace: false,\n    Voice: 0,\n  };\n}\n\nfunction CreateEmptyMeasure(id: number): XMLMeasure {\n  return {\n    ID: id,\n    Clef: XMLClef.G,\n    Key: \"\",\n    TimeSignature: { top: 0, bottom: 0 },\n    Notes: [],\n  };\n}\n\n\n","import { ParseTextPartWise } from \"./parser.js\";\nimport { XMLScore } from \"./score.js\";\n\nconst testString2 = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML 3.1 Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\">\n<score-partwise version=\"3.1\">\n  <identification>\n    <encoding>\n      <software>MuseScore 3.6.2</software>\n      <encoding-date>2025-06-15</encoding-date>\n      <supports element=\"accidental\" type=\"yes\"/>\n      <supports element=\"beam\" type=\"yes\"/>\n      <supports element=\"print\" attribute=\"new-page\" type=\"yes\" value=\"yes\"/>\n      <supports element=\"print\" attribute=\"new-system\" type=\"yes\" value=\"yes\"/>\n      <supports element=\"stem\" type=\"yes\"/>\n      </encoding>\n    </identification>\n  <defaults>\n    <scaling>\n      <millimeters>7</millimeters>\n      <tenths>40</tenths>\n      </scaling>\n    <page-layout>\n      <page-height>1697.14</page-height>\n      <page-width>1200</page-width>\n      <page-margins type=\"even\">\n        <left-margin>85.7143</left-margin>\n        <right-margin>85.7143</right-margin>\n        <top-margin>85.7143</top-margin>\n        <bottom-margin>85.7143</bottom-margin>\n        </page-margins>\n      <page-margins type=\"odd\">\n        <left-margin>85.7143</left-margin>\n        <right-margin>85.7143</right-margin>\n        <top-margin>85.7143</top-margin>\n        <bottom-margin>85.7143</bottom-margin>\n        </page-margins>\n      </page-layout>\n    <word-font font-family=\"Edwin\" font-size=\"10\"/>\n    <lyric-font font-family=\"Edwin\" font-size=\"10\"/>\n    </defaults>\n  <part-list>\n    <part-group type=\"start\" number=\"1\">\n      <group-symbol>brace</group-symbol>\n      </part-group>\n    <score-part id=\"P1\">\n      <part-name>Piano</part-name>\n      <part-abbreviation>Pno.</part-abbreviation>\n      <score-instrument id=\"P1-I1\">\n        <instrument-name>Piano</instrument-name>\n        </score-instrument>\n      <midi-device id=\"P1-I1\" port=\"1\"></midi-device>\n      <midi-instrument id=\"P1-I1\">\n        <midi-channel>1</midi-channel>\n        <midi-program>1</midi-program>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      </score-part>\n    </part-list>\n  <part id=\"P1\">\n    <measure number=\"1\" width=\"338.41\">\n      <print>\n        <system-layout>\n          <system-margins>\n            <left-margin>50.00</left-margin>\n            <right-margin>413.23</right-margin>\n            </system-margins>\n          <top-system-distance>70.00</top-system-distance>\n          </system-layout>\n        </print>\n      <attributes>\n        <divisions>2</divisions>\n        <key>\n          <fifths>-1</fifths>\n          </key>\n        <time>\n          <beats>3</beats>\n          <beat-type>4</beat-type>\n          </time>\n        <clef>\n          <sign>G</sign>\n          <line>2</line>\n          </clef>\n        </attributes>\n      <note default-x=\"98.84\" default-y=\"-20.00\">\n        <pitch>\n          <step>B</step>\n          <alter>-1</alter>\n          <octave>4</octave>\n          </pitch>\n        <duration>2</duration>\n        <voice>1</voice>\n        <type>quarter</type>\n        <stem>down</stem>\n        </note>\n      <note default-x=\"172.00\" default-y=\"-10.00\">\n        <pitch>\n          <step>D</step>\n          <octave>5</octave>\n          </pitch>\n        <duration>1</duration>\n        <voice>1</voice>\n        <type>eighth</type>\n        <stem>down</stem>\n        <beam number=\"1\">begin</beam>\n        </note>\n      <note default-x=\"217.73\" default-y=\"-5.00\">\n        <pitch>\n          <step>E</step>\n          <octave>5</octave>\n          </pitch>\n        <duration>1</duration>\n        <voice>1</voice>\n        <type>eighth</type>\n        <stem>down</stem>\n        <beam number=\"1\">end</beam>\n        </note>\n      <note default-x=\"263.45\" default-y=\"-15.00\">\n        <pitch>\n          <step>C</step>\n          <octave>5</octave>\n          </pitch>\n        <duration>2</duration>\n        <voice>1</voice>\n        <type>quarter</type>\n        <stem>down</stem>\n        </note>\n      </measure>\n    <measure number=\"2\" width=\"226.93\">\n      <note default-x=\"13.00\" default-y=\"-20.00\">\n        <pitch>\n          <step>B</step>\n          <alter>-1</alter>\n          <octave>4</octave>\n          </pitch>\n        <duration>4</duration>\n        <voice>1</voice>\n        <type>half</type>\n        <stem>down</stem>\n        </note>\n      <note default-x=\"138.09\" default-y=\"-15.00\">\n        <pitch>\n          <step>C</step>\n          <octave>5</octave>\n          </pitch>\n        <duration>2</duration>\n        <voice>1</voice>\n        <type>quarter</type>\n        <stem>down</stem>\n        </note>\n      <barline location=\"right\">\n        <bar-style>light-heavy</bar-style>\n        </barline>\n      </measure>\n    </part>\n  </score-partwise>\n`;\n\nconst testString = `\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE score-partwise PUBLIC\n    \"-//Recordare//DTD MusicXML 4.0 Partwise//EN\"\n    \"http://www.musicxml.org/dtds/partwise.dtd\">\n<score-partwise version=\"4.0\">\n  <part-list>\n    <score-part id=\"P1\">\n      <part-name>Music</part-name>\n    </score-part>\n  </part-list>\n  <part id=\"P1\">\n    <measure number=\"1\">\n      <attributes>\n        <divisions>1</divisions>\n        <key>\n          <fifths>0</fifths>\n        </key>\n        <time>\n          <beats>4</beats>\n          <beat-type>4</beat-type>\n        </time>\n        <clef>\n          <sign>G</sign>\n          <line>2</line>\n        </clef>\n      </attributes>\n      <note>\n        <pitch>\n          <step>C</step>\n          <octave>4</octave>\n        </pitch>\n        <duration>4</duration>\n        <type>whole</type>\n      </note>\n    </measure>\n  </part>\n</score-partwise>\n`;\n\nexport module MXMLParser {\n  // API\n  export function ParseT() {\n    let elem = document.getElementById(\"text_elem\");\n    if (!elem) {\n      return;\n    }\n    elem.innerHTML = JSON.stringify(ParseTextPartWise(testString2), null, 2);\n  }\n\n  export function ParsePartWise(score: string): XMLScore {\n    return ParseTextPartWise(score);\n  }\n\n}\n\nexport { XMLScore } from \"./score.js\";\n\n\n"],"mappings":"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","names":["CreateEmptyScore","ParseTextPartWise","fileString","Params","CreateEmptyScore","CurrentMeasure","CurrentNote","MeasureDivisions","RunningNoteID","CurrentBeat","LastBeat","LastDuration","NoteLetter","NoteOctave","IsChord","line","i","FindMeasure","GetContentBetweenTags","keyData","keyString","ReturnKeyString","beat","beatType","clefType","ReturnClefType","CreateEmptyNote","note_duration","params","id","split_line","msr","CreateEmptyMeasure","clefString","testString2","MXMLParser","ParseT","elem","ParseTextPartWise","testString2","ParsePartWise","score"]}